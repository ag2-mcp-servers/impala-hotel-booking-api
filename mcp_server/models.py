# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:40:17+00:00

from __future__ import annotations

from datetime import date as date_aliased
from datetime import datetime
from enum import Enum
from typing import List, Optional
from uuid import UUID

from pydantic import AnyUrl, BaseModel, Field, RootModel, confloat, constr


class Address(BaseModel):
    city: str = Field(..., examples=['Impalaland'])
    country: str = Field(
        ...,
        description='Three-character country code in ISO alpha-3 format.',
        examples=['GBR'],
    )
    countryName: str = Field(
        ..., description='English name of the country.', examples=['United Kingdom']
    )
    line1: str = Field(
        ..., description='First line of the address.', examples=['12 Sample Avenue']
    )
    line2: Optional[str] = Field(None, description='Second line of the address.')
    postalCode: str = Field(..., examples=['12345'])
    region: Optional[str] = None


class BookableDateRange(BaseModel):
    end: str = Field(..., examples=['2021-08-23'])
    start: str = Field(..., examples=['2021-05-15'])


class NightsRange(BaseModel):
    max: float = Field(..., examples=[5])
    min: confloat(ge=1.0) = Field(..., examples=[3])


class Rules(BaseModel):
    bookableDateRange: BookableDateRange = Field(
        ..., description='The date range the adjustment applies to, inclusive.'
    )
    nightsRange: NightsRange = Field(
        ..., description='The number of nights the adjustment applies to, inclusive.'
    )


class Type(Enum):
    LENGTH_OF_STAY = 'LENGTH_OF_STAY'


class AdjustmentConditionLengthOfStayRule(BaseModel):
    rules: Rules
    type: Type = Field(
        ...,
        description='The type of the condition. Currently we only support conditions based on length of stay.',
    )


class AdjustmentConditions(RootModel[AdjustmentConditionLengthOfStayRule]):
    root: AdjustmentConditionLengthOfStayRule


class Amenity(BaseModel):
    code: float = Field(
        ...,
        description='Unique identifier of this amenity according to the Open Travel Alliance HAC (Hotel Amenity Code) standard for hotels and RAC (Room Amenity Code) standard for rooms.',
        examples=[1234],
    )
    formatted: str = Field(
        ...,
        description='A human-readable English description of the amenity.',
        examples=['WiFi'],
    )


class RoomType(BaseModel):
    name: str = Field(
        ...,
        description="The hotel's name for this room type.",
        examples=['Penthouse Suite'],
    )
    roomTypeId: UUID = Field(
        ...,
        description='Unique identifier of this room type within the Impala platform.',
        examples=['d5b192ce-c45f-46da-abf5-3880b429b7cc'],
    )


class Notes(BaseModel):
    fromGuest: str = Field(
        ...,
        description="Notes your guest has entered as part of the booking. These allow them to communicate anything to the hotel (e.g. that they're travelling for a special occassion or have a particular room assignment preference).",
    )
    fromSeller: str = Field(
        ...,
        description='Notes you as a seller want to communicated to the hotel. These might be around operational processes to watch out for. Impala communicates these as coming from you.',
    )


class Status(Enum):
    CANCELLED = 'CANCELLED'
    PENDING = 'PENDING'
    ACCEPTED = 'ACCEPTED'
    PAYMENT_REQUIRED = 'PAYMENT_REQUIRED'
    PAYMENT_ABANDONED = 'PAYMENT_ABANDONED'


class PaymentType(Enum):
    API = 'API'


class BookingContact(BaseModel):
    email: Optional[str] = Field(
        None, description='The email address of the guest for the booking.'
    )
    firstName: str = Field(
        ..., description='The first name of the guest for the booking.'
    )
    lastName: str = Field(
        ..., description='The first name of the guest for the booking.'
    )


class Type1(Enum):
    NON_REFUNDABLE = 'NON_REFUNDABLE'
    PERCENTAGE = 'PERCENTAGE'
    NONE = 'NONE'
    NIGHTS = 'NIGHTS'
    FLAT = 'FLAT'


class CancellationPolicy1Enum(Enum):
    FREE_CANCELLATION = 'FREE_CANCELLATION'
    FREE_CANCELLATION_24 = 'FREE_CANCELLATION_24'
    FREE_CANCELLATION_48 = 'FREE_CANCELLATION_48'
    FREE_CANCELLATION_WEEK = 'FREE_CANCELLATION_WEEK'
    NON_REFUNDABLE = 'NON_REFUNDABLE'


class CancellationPolicy1(RootModel[Optional[CancellationPolicy1Enum]]):
    root: Optional[CancellationPolicy1Enum] = Field(
        None, description='Type of cancellation policy applicable to the rate'
    )


class Conditions(BaseModel):
    cancellationDeadline: float
    cancellationPolicy: CancellationPolicy1 = Field(
        ..., description='Type of cancellation policy applicable to the rate'
    )


class BookingWindowRestriction(BaseModel):
    maxDaysBeforeCheckIn: Optional[float] = Field(
        None,
        description='Maximum number of days (inclusive) before check-in that this deal can be booked with',
    )
    minDaysBeforeCheckIn: Optional[float] = Field(
        None,
        description='Minimum number of days (inclusive) before check-in that this deal can be booked with',
    )


class Type2(Enum):
    DAYS_BEFORE_ARRIVAL_AT_MIDNIGHT = 'DAYS_BEFORE_ARRIVAL_AT_MIDNIGHT'
    DAYS_BEFORE_ARRIVAL_AT_CHECK_IN_TIME = 'DAYS_BEFORE_ARRIVAL_AT_CHECK_IN_TIME'


class CancellationPolicy2(BaseModel):
    count: float = Field(
        ...,
        description='This is the cancellation policy applicable to the deal.',
        examples=[2],
    )
    type: Type2 = Field(
        ...,
        description='Cancellation may exist in minutes, hours or days prior to a stay.',
        examples=['DAYS_BEFORE_ARRIVAL_AT_MIDNIGHT'],
    )


class Type3(Enum):
    PERCENTAGE = 'PERCENTAGE'


class Commission(BaseModel):
    count: float = Field(
        ...,
        description='This is the amount of commission you will receive.',
        examples=[14],
    )
    type: Type3 = Field(
        ...,
        description='This is the type of commission which can be: PERCENTAGE or FLAT_FEE.',
        examples=['PERCENTAGE'],
    )


class Condition(Enum):
    PACKAGED = 'PACKAGED'
    PRIVATE_RATE = 'PRIVATE_RATE'


class DealRequestStatus(Enum):
    PENDING = 'PENDING'
    ACCEPTED = 'ACCEPTED'
    REJECTED = 'REJECTED'


class DealType(Enum):
    SENT_ON_IMPALA = 'SENT_ON_IMPALA'
    EXTERNAL = 'EXTERNAL'
    IMPALA_SHARED = 'IMPALA_SHARED'


class Type4(Enum):
    PERCENTAGE = 'PERCENTAGE'
    FLAT_FEE = 'FLAT_FEE'


class Discount(BaseModel):
    count: float = Field(
        ..., description='The amount of discount received.', examples=[5]
    )
    type: Type4 = Field(
        ...,
        description='The type of discount, either PERCENTAGE or FLAT_FEE.',
        examples=['PERCENTAGE'],
    )


class LengthOfStay(BaseModel):
    max: int = Field(
        ...,
        description='The maximum number of nights (inclusive) a guest can stay to be able to book this deal.',
        examples=[14],
    )
    min: int = Field(
        ...,
        description='The minimum number of nights (inclusive) a guest has to stay to be able to book this deal.',
        examples=[1],
    )


class SellableInDateRange(BaseModel):
    end: date_aliased = Field(
        ...,
        description='The last date on which you can sell rates using this deal.',
        examples=['2021-12-31'],
    )
    start: date_aliased = Field(
        ...,
        description='The earliest date on which you can sell rates using this deal.',
        examples=['2021-01-01'],
    )


class StayDateRange(BaseModel):
    end: date_aliased = Field(
        ...,
        description='The last departure date guests can book for the conditions you agreed.',
        examples=['2021-12-31'],
    )
    start: date_aliased = Field(
        ...,
        description='The earliest arrival date guests can book for the conditions you agreed.',
        examples=['2021-01-01'],
    )


class DealRequest(BaseModel):
    bookingWindowRestriction: BookingWindowRestriction = Field(
        ...,
        description='Only show and apply this deal for bookings made min/max days before check-in',
    )
    cancellationPolicy: CancellationPolicy2 = Field(
        ...,
        description="Public rates hotels offer come with cancellation policies the hotel defines (e.g. free to cancel until 14 days before arrival). If you agree on cancellation policies here, this means they override the hotel's own policies for any booking made with this deal (e.g. free to cancel until two days before arrival).",
    )
    commission: Commission = Field(
        ...,
        description='Rather than the commission Impala has pre-negotiated with the hotel, bookings made with this deal will generate the commission defined here for you.',
    )
    conditions: List[Condition] = Field(
        ...,
        description='A deal may have conditions set to it. For example, the deal may only apply for a closed user group (PRIVATE_RATE) or sold along with another component e.g flights (PACKAGED)',
    )
    createdAt: datetime = Field(
        ...,
        description="Date and time (in UTC and ISO 8601 format) when the deal's static content was created.",
        examples=['2020-01-01T10:36:25.267Z'],
    )
    dealRequestId: str = Field(
        ...,
        description='The unique identifier for this deal request',
        examples=['D4578932323'],
    )
    dealRequestStatus: DealRequestStatus = Field(
        ..., description='The status of the deal request.', examples=['ACCEPTED']
    )
    dealType: DealType = Field(
        ..., description='The type of the deal request.', examples=['IMPALA_SHARED']
    )
    discount: Discount = Field(
        ...,
        description="Rather than selling the hotel's generally available public rates, if a discount is agreed on, bookings made with this deal will have a reduced rate.",
    )
    lengthOfStay: LengthOfStay = Field(
        ...,
        description="You're agreeing with the hotel that any booking made will have a minimum and/or maximum amount of nights.",
    )
    sellableInDateRanges: List[SellableInDateRange] = Field(
        ...,
        description='The date ranges within which you can sell rates using this deal.',
        min_length=1,
    )
    specialInstructions: str = Field(
        ...,
        description='These are conditions set by you the seller or the hotel for which the deal can be sold. For example: this deal can only be sold on mobile. Any specialInstructions will override other variables, for example, if an instruction includes: All bookings are non refundable, this will override any pre-existing cancellationPolicy. ',
        examples=[
            'This deal can only be sold via desktop (not allowed for mobile apps)'
        ],
    )
    stayDateRanges: List[StayDateRange] = Field(
        ...,
        description='The date ranges within which guests you sell can stay at the hotel with the conditions you agree, given the hotel has rooms available.',
        min_length=1,
    )
    updatedAt: datetime = Field(
        ...,
        description="Date and time (in UTC and ISO 8601 format) when the deal's static content was last updated.",
        examples=['2020-11-27T10:46:35.569Z'],
    )


class Name(Enum):
    BOOKING_COM = 'BOOKING.COM'
    HOTELS_COM = 'HOTELS.COM'


class ExternalUrl(BaseModel):
    name: Optional[Name] = Field(None, description='Destination of the external url')
    url: Optional[str] = Field(None, description='Value of the external url')


class GenericError(BaseModel):
    code: Optional[str] = Field(
        None,
        description='Error code for you to use programatically, for error logging and debugging.',
        examples=['ERROR_CODE'],
    )
    message: str = Field(
        ...,
        description='Error message intended to aid developers in debugging issues. We strongly advise against displaying this information publicly to your guests as it **might contain sensitive implementation details**.',
        examples=['Resource not found'],
    )


class GuestPaymentErrorStub(BaseModel):
    code: str = Field(..., examples=['PAYMENT_FAILED'])
    message: str = Field(
        ...,
        description='Information about why we could not successfully charge the guest for the booking',
        examples=['Incorrect cvc number'],
    )


class Status1(Enum):
    COMPLETED = 'COMPLETED'
    PROCESSING = 'PROCESSING'
    AUTHORISATION_REQUIRED = 'AUTHORISATION_REQUIRED'


class GuestPaymentStub(BaseModel):
    authorisationRedirectUrl: Optional[str] = Field(
        None, examples=['https://www.starling.3ds.co.uk']
    )
    createdAt: datetime
    paymentId: str
    status: Status1


class Type5(Enum):
    DAYS_BEFORE_ARRIVAL_AT_MIDNIGHT = 'DAYS_BEFORE_ARRIVAL_AT_MIDNIGHT'
    DAYS_BEFORE_ARRIVAL_AT_CHECK_IN_TIME = 'DAYS_BEFORE_ARRIVAL_AT_CHECK_IN_TIME'


class CancellationPolicy3(BaseModel):
    count: float = Field(..., examples=[2])
    type: Type5 = Field(..., examples=['DAYS_BEFORE_ARRIVAL_AT_MIDNIGHT'])


class Type6(Enum):
    PERCENTAGE = 'PERCENTAGE'


class Commission1(BaseModel):
    count: float = Field(..., examples=[14])
    type: Type6 = Field(..., examples=['PERCENTAGE'])


class DealsSellable(BaseModel):
    max: float


class Discount1(BaseModel):
    count: float = Field(..., examples=[5])
    type: Type6 = Field(..., examples=['PERCENTAGE'])


class HotelAgreementStatus(Enum):
    ACCEPTED = 'ACCEPTED'
    REJECTED = 'REJECTED'
    PENDING = 'PENDING'


class LengthOfStay1(BaseModel):
    max: int = Field(
        ...,
        description='The maximum number of nights (inclusive) a guest has to stay to be able to book this deal.',
        examples=[14],
    )
    min: int = Field(
        ...,
        description='The minimum number of nights (inclusive) a guest has to stay to be able to book this deal.',
        examples=[1],
    )


class SellableInDateRange1(BaseModel):
    end: date_aliased = Field(
        ...,
        description='The last date on which you can sell rates using this deal.',
        examples=['2021-12-31'],
    )
    start: date_aliased = Field(
        ...,
        description='The date on which you can sell rates using this deal.',
        examples=['2021-01-01'],
    )


class HotelAgreement(BaseModel):
    cancellationPolicy: CancellationPolicy3 = Field(
        ...,
        description="Public rates hotels offer come with cancellation policies the hotel defines (e.g. free to cancel until 14 days before arrival). If you agree on cancellation policies here, this means they override the hotel's own policies for any booking made with this deal (e.g. free to cancel until two days before arrival).",
    )
    commission: Commission1 = Field(
        ...,
        description='Rather than the commission Impala has pre-negotiated with the hotel, bookings made with this deal will generate the commission defined here for you.',
    )
    conditions: List[Condition] = Field(
        ...,
        description='A deal may have conditions set to it. For example, the deal may only apply for a closed user group (PRIVATE_RATE) or sold along with another component e.g flights (PACKAGED)',
    )
    createdAt: datetime = Field(
        ...,
        description="Date and time (in UTC and ISO 8601 format) when the hotel's stable content (i.e. all the details of the hotel excluding its rates) was created.",
        examples=['2020-01-01T10:36:25.267Z'],
    )
    dealsSellable: DealsSellable
    discount: Discount1 = Field(
        ...,
        description="Rather than selling the hotel's generally available public rates, if a discount is agreed on, bookings made with this deal will have a reduced rate.",
    )
    hotelAgreementId: str = Field(
        ...,
        description='The unique identifier for this hotel agreement',
        examples=['A82983'],
    )
    hotelAgreementStatus: HotelAgreementStatus
    hotelId: str = Field(
        ...,
        description='The unique identifier for this deal request',
        examples=['D4578932323'],
    )
    lengthOfStay: LengthOfStay1 = Field(
        ...,
        description="You're agreeing with the hotel that any booking made will have a minimum and/or maximum amount of nights.",
    )
    sellableInDateRanges: List[SellableInDateRange1] = Field(
        ...,
        description='The date ranges within which you can sell rates using this deal.',
        min_length=1,
    )
    specialInstructions: str = Field(
        ...,
        description='These are conditions set by you the seller or the hotel for which the deal can be sold. For example: this deal can only be sold on mobile. Any specialInstructions will override other variables, for example, if an instruction includes: All bookings are non refundable, this will override any pre-existing cancellationPolicy.',
        examples=[
            'This deal can only be sold via desktop (not allowed for mobile apps)'
        ],
    )
    stayDateRanges: List[StayDateRange] = Field(
        ...,
        description='The date ranges within which guests you sell can stay at the hotel with the conditions you agree, given the hotel has rooms available.',
        min_length=1,
    )
    updatedAt: datetime = Field(
        ...,
        description="Date and time (in UTC and ISO 8601 format) when the hotel's stable content (i.e. all the details of the hotel excluding its rates)  was last updated.",
        examples=['2020-11-27T10:46:35.569Z'],
    )


class DealsSellable1(BaseModel):
    remaining: Optional[float] = Field(
        None, description='The amount of deals remaining that can sold.', examples=[5]
    )


class Discount2(BaseModel):
    count: Optional[float] = Field(
        None, description='This is the amount of discount received.', examples=[10]
    )
    type: Optional[str] = Field(
        None,
        description='This is the type of discount which can be: PERCENTAGE or FLAT_FEE.',
        examples=['FLATFEE'],
    )


class HotelAgreementStub(BaseModel):
    conditions: Optional[List[str]] = Field(
        None,
        description='A deal may have conditions set to it. For example, the deal may only apply for a closed user group (PRIVATE_RATE) or sold along with another component e.g flights (PACKAGED)',
    )
    dealId: str = Field(
        ...,
        description='The unique identifier for this deal request.',
        examples=['D1234'],
    )
    dealsSellable: Optional[DealsSellable1] = Field(
        None, description='There is a limit to the number of deals that can be sold. '
    )
    discount: Optional[Discount2] = Field(
        None,
        description="Rather than selling the hotel's generally available public rates, if a discount is agreed on, bookings made with this deal will have a reduced rate.",
        examples=[{'count': 10, 'type': 'PERCENTAGE'}],
    )
    hotelAgreementId: str = Field(
        ...,
        description='Unique identifier for the hotel agreement.',
        examples=['A82983'],
    )
    href: Optional[str] = Field(
        None,
        description='URI that allows access to the full deal information.',
        examples=['v1/deal-requests/D1234/agreements/A76543'],
    )
    specialInstructions: str = Field(
        ...,
        description='These are conditions set by you the seller or the hotel for which the deal can be sold. For example: this deal can only be sold on mobile. Any specialInstructions will override other variables, for example, if an instruction includes: All bookings are non refundable, this will override any pre-existing cancellationPolicy.',
        examples=[
            'This deal can only be sold via desktop (not allowed for mobile apps)'
        ],
    )


class Description(BaseModel):
    short: Optional[str] = Field(
        None,
        description="A short description that helps highlight what's special about this hotel.",
        examples=[
            "Don't expect anything fancy. This fictional example hotel has the bare minimum content, rate availability and features you can expect from any hotel on the Impala platform (https://impala.travel). It contains minimum photography at the minimum resolution, only the fields that you can expect to see on every hotel on the platform, and only one room type and rate. Testing with this hotel means your app works well in the rare cases where a hotel has only minimum content available."
        ],
    )


class Image(BaseModel):
    altText: Optional[str] = Field(
        None,
        description='Alternative text for the image (to be used e.g. to cater to screenreaders).',
        examples=['A photo of an object'],
    )
    height: float = Field(..., description='Height in pixels.', examples=[4000])
    url: AnyUrl = Field(
        ...,
        description='The url of this image. The url of an image might change over time, and we therefore advise not to store or cache image URLs within your app beyond a few minutes.',
        examples=['https://cdn.impala.travel/ckhlsuxbb000b3b666rr9ussq.jpg'],
    )
    width: float = Field(..., description='Width in pixels.', examples=[4000])


class Location(BaseModel):
    latitude: float = Field(..., description='WGS 84 latitude.', examples=[58.386186])
    longitude: float = Field(..., description='WGS 84 longitude.', examples=[-9.952549])


class Currency(BaseModel):
    code: str = Field(
        ...,
        description='Three-character currency code in ISO 4217 notation.',
        examples=['EUR'],
    )


class Money(BaseModel):
    amount: int = Field(
        ...,
        description='Amount in the smallest unit of the currency. E.g. 234.56 € is expressed as 23456 (in Euro cents to avoid rounding errors in calculations).',
        examples=[9500],
    )
    currency: Currency = Field(
        ..., description='Details of the currency.', title='CurrencyDetails'
    )


class NotesBookedRoom(BaseModel):
    fromGuest: str = Field(
        ...,
        description='Notes your guest has entered as part of the booking for this booked room. These allow them to communicate anything noteworthy about this booked room to the hotel, e.g. special instructions around room setup, that the minibar should not contain any alcoholic beverages or a wheelchair-accessible room is required.',
    )
    fromSeller: str = Field(
        ...,
        description='Notes from you as a seller allow you to communicate any instructions for this booked room. These are communicated to the hotel as coming from you. You can use this field to provide the hotel with pointers about e.g. room setup, connecting doors that need to be opened, extrabeds to be placed in the rooms or any other instructions.',
    )


class NotesBooking(BaseModel):
    fromGuest: Optional[str] = Field(
        None,
        description='Notes a guest has entered as they made the book can be added here. This allows you to display a free text field to your guests where they can enter any information they want to communicate to the hotel (e.g. that their booking is for a special occassion or that they have a particular room preference).',
    )
    fromSeller: Optional[str] = Field(
        None,
        description='Notes you as a seller want to communicate to the hotel. You might use this field to communicate operational processes to watch out for (e.g. providing the hotel with context around where the booking was made or what to watch out for) or information about the guest.',
    )


class Pagination(BaseModel):
    count: float = Field(
        ..., description='The number of items returned on this page.', examples=[10]
    )
    next: str = Field(
        ...,
        description='The absolute URL pointing to the next page. Will be null if there are no next pages.',
        examples=['/v1/sample?size=20&offset=120'],
    )
    prev: str = Field(
        ...,
        description='The absolute URL pointing to the previous page. Will be null if there are no previous pages.',
        examples=['/v1/sample?size=20&offset=80'],
    )
    total: float = Field(
        ...,
        description='The total number of items that exist for your query across all pages.',
        examples=[1500],
    )


class PersonInfo(BaseModel):
    email: str = Field(
        ...,
        description='Email address.',
        examples=['jocelin.carreon.crespo@example.com'],
    )
    firstName: str = Field(..., description='First name.', examples=['Jocelín'])
    lastName: str = Field(
        ..., description='Family name or surname.', examples=['Carreón Sample']
    )


class RateAdjustment(BaseModel):
    adjustmentId: Optional[UUID] = Field(
        None, description='Unique identifier of this rate adjustment.'
    )
    amount: confloat(ge=0.0, le=100.0) = Field(
        ..., description='The percentage discount between 0 and 100.', examples=[5]
    )
    conditions: List[AdjustmentConditions] = Field(
        ...,
        description='A list of conditions for the adjustment to apply.',
        min_length=1,
    )
    type: Type6 = Field(..., description='The adjustment type.')


class Type9(Enum):
    BREAKFAST = 'BREAKFAST'
    LUNCH = 'LUNCH'
    DINNER = 'DINNER'
    WELCOME_BEVERAGE = 'WELCOME_BEVERAGE'
    ALL_INCLUSIVE = 'ALL_INCLUSIVE'


class RateComponent(BaseModel):
    formatted: str = Field(
        ...,
        description='Human-readable plain English version of the component included in the rate, ready to be shown to your guests.',
        examples=['breakfast'],
    )
    includedInRate: Optional[bool] = None
    type: Type9 = Field(
        ...,
        description='The type of product or service included in the price. We currently support rates including "BREAKFAST", "LUNCH", "DINNER" and "ALL_INCLUSIVE".',
        examples=['BREAKFAST'],
    )


class RatePlanRate(BaseModel):
    adults: confloat(ge=1.0) = Field(
        ...,
        description='The number of adults in the room for which this price applies.',
    )
    retailRate: Money
    roomsSellable: float = Field(
        ...,
        description='Amount of room which can be sold for this occupancy level and room type at this rate price.',
    )


class LengthOfStay2(BaseModel):
    max: Optional[float] = Field(
        None,
        description='The maximum number of nights (inclusive) a guest can stay to be eligible for this rate plan.',
    )
    min: float = Field(
        ...,
        description='The minimum number of nights (inclusive) a guest has to stay to be eligible for this rate plan.',
    )


class RatePlanRestrictions(BaseModel):
    lengthOfStay: LengthOfStay2 = Field(
        ...,
        description='Determines the length of stay in nights for which this rate plan can be booked.',
    )


class RatePlanRoom(BaseModel):
    adults: float = Field(..., description='number of adult guests')
    notes: Optional[NotesBookedRoom] = None
    price: Money
    ratePlanId: float
    roomTypeId: UUID


class Staythrough(BaseModel):
    min: float = Field(..., description='Expressed in minimum value.')


class RatesPerDate(BaseModel):
    closed: bool = Field(
        ...,
        description='Determines whether the rate is available for a stay including this date.',
    )
    closedToArrival: Optional[bool] = Field(
        None,
        description='Determines whether the rate is available if the arrival falls on this date.',
    )
    closedToDeparture: Optional[bool] = Field(
        None,
        description='Determines whether the rate is available if the departure falls on this date.',
    )
    date: constr(min_length=1) = Field(..., description='')
    rates: List[RatePlanRate] = Field(
        ..., description='Rate prices for each occupancy the room can accommodate.'
    )
    staythrough: Optional[Staythrough] = Field(
        None,
        description='The minimum number of nights (inclusive) that the guest has to book which include the date to be eligible for this rate.',
    )


class Category(Enum):
    VAT = 'VAT'
    CITY_TAX = 'CITY_TAX'
    OTHER = 'OTHER'


class TaxOrFee(BaseModel):
    category: Optional[Category] = Field(
        None, description='Structured information on what type the type of tax or fee.'
    )
    charges: Optional[Money] = None
    formatted: Optional[constr(min_length=1)] = Field(
        None,
        description='Formatted English description of this tax or fee, ready to be shown to your guests.',
        examples=['10% VAT'],
    )


class TimeRange(BaseModel):
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Time in ISO 8601 time format.',
        examples=['13:00'],
    )
    to: Optional[str] = Field(
        None, description='Time in ISO 8601 time format.', examples=['21:00']
    )


class UpdateBookingVersionAtTimestamp(RootModel[datetime]):
    root: datetime = Field(
        ...,
        description='The timestamp of when the booking was last updated',
        examples=['2020-12-20T11:01:30.745Z'],
    )


class ValidationResult(BaseModel):
    code: str = Field(
        ...,
        description='Error code intended for logging and debugging.',
        examples=['ANY_REQUIRED'],
    )
    field: Optional[str] = Field(
        None,
        description='Name of the field that has failed to validate. Intended to aid developers in finding and fixing implementation mistakes.',
        examples=['start'],
    )
    message: str = Field(
        ...,
        description='Error message in English intended to aid developers in finding and solving implementation mistakes. Do not display to your guests as it **might contain sensitive implementation information**.',
        examples=['"start" is required'],
    )


class Start(BaseModel):
    pass


class End(BaseModel):
    pass


class Created(BaseModel):
    pass


class Updated(BaseModel):
    pass


class Name1(BaseModel):
    pass


class StarRating(BaseModel):
    pass


class Country(BaseModel):
    pass


class HotelIds(RootModel[List[str]]):
    root: List[str] = Field(
        ...,
        examples=[
            [
                '0e25533a-2db2-4894-9db1-4c1ff92d798c,77c272b6-18e6-4036-b9c3-7fc5454e3f6a'
            ]
        ],
    )


class UpdatedAt(BaseModel):
    pass


class TaxesAndFees(BaseModel):
    includedInRate: Optional[List[TaxOrFee]] = Field(
        None,
        description='Taxes and fees that are included in the `retailRate.total` price paid at the time of booking.',
        min_length=0,
    )
    payAtHotel: Optional[List[TaxOrFee]] = Field(
        None,
        description='Taxes and fees that need to be payed at the hotel (often upon arrival or departure). This frequently happens for fees that only need to be collected based on certain conditions (e.g. a guest coming from abroad or being older than a certain age).',
        min_length=0,
    )


class RetailRate(BaseModel):
    taxesAndFees: TaxesAndFees = Field(
        ...,
        description='Breakdown of taxes (e.g. VAT, city tax) and fees (e.g. cleaning or resort fees).',
    )
    total: Money


class Contact(PersonInfo):
    contactId: UUID = Field(
        ...,
        description='Unique identifier of this guest within the Impala platform.',
        examples=['3c8aa2ff-5e5e-4f23-bcfc-9036ba818a84'],
    )


class Room(BaseModel):
    adults: float = Field(
        ..., description='The number of adult guests staying in the room.', examples=[2]
    )
    notes: Optional[NotesBookedRoom] = None
    rateId: str = Field(
        ...,
        description='The unique identifier of this rate within Impala. Every rate returned in the `roomTypes[].rates[]` array when retrieving hotel availability includes this id.',
        examples=[
            '3rX3IaqkpJaPlttxoFoM3uDcHJEZCAuByqfBSLUPMvkBGyu7IAlhbxl3rZ7cVmVj6TbXL4EfiHlTA'
        ],
    )


class BookingRequest(BaseModel):
    bookingContact: PersonInfo = Field(
        ...,
        description='Details of your guest (will be provided to the hotel in case of questions).',
    )
    end: date_aliased = Field(
        ...,
        description='The last day of the desired stay range in ISO 8601 format YYYY-MM-DD.',
    )
    notes: Optional[NotesBooking] = None
    paymentType: Optional[PaymentType] = Field(
        None, description='How will the guest make payment for this booking?'
    )
    rooms: List[Room] = Field(
        ..., description='List of room type identifiers to be booked.'
    )
    start: date_aliased = Field(
        ...,
        description='The first day of the desired stay range in ISO 8601 format YYYY-MM-DD.',
    )


class BookingRequestWithRatePlans(BaseModel):
    bookingContact: BookingContact = Field(
        ...,
        description='Contact data to the guest that booked the accomodation',
        title='BookingContact',
    )
    dealId: Optional[str] = Field(
        None,
        description='The id of the deal that contains agreement made between the hotel and company',
    )
    end: date_aliased = Field(
        ...,
        description='The last day of the desired stay range in ISO 8601 format YYYY-MM-DD.',
    )
    notes: Optional[NotesBooking] = None
    paymentType: Optional[PaymentType] = Field(
        None, description='How will the guest make payment for this booking?'
    )
    rooms: List[RatePlanRoom] = Field(
        ..., description='Array of rooms booked within this booking'
    )
    start: date_aliased = Field(
        ...,
        description='The first day of the desired stay range in ISO 8601 format YYYY-MM-DD.',
    )


class CancellationFee(BaseModel):
    count: Optional[float] = Field(
        None,
        description='The value that is used in calculation of the cost. This could be 50 in case of a 50% fee being charged for a type "PERCENTAGE" or 2 in case of the initial two nights of the stay being charged in full as a fee if the type is "NIGHTS".',
        examples=[100],
    )
    price: Money
    type: Type1 = Field(
        ...,
        description='The way in which the cancellation fee is calculated. This can be "NONE" in case a full refund is paid out, "NON_REFUNDABLE" if no refund is paid out and the full amount is due, "PERCENTAGE" if a percentage of the total price for the stay is charged as cancellation fee, "NIGHTS" if a defined number of initial nights of the stay are charged in full as cancellation fee or "FLAT" in case a flat cancellation fee is charged.',
        examples=['PERCENTAGE'],
    )


class CancellationPolicy(BaseModel):
    end: Optional[str] = Field(
        None,
        description="The time (in the hotel's local timezone) at which the policy takes effect, in ISO 8601 format. If omitted, the policy applies open-ended until the guests' stay.",
        examples=['2020-12-17 23:59:59.999'],
    )
    fee: CancellationFee
    formatted: str = Field(
        ...,
        description='Human-readable plain English cancellation policy information, ready to be shown to your guests.',
        examples=['Non-refundable after October 19, 2021 00:00'],
    )
    start: str = Field(
        ...,
        description="The time (in the hotel's local timezone) at which the policy takes effect, in ISO 8601 format. If omitted, the policy is already in effect.",
        examples=['2020-12-15 23:59:59.999'],
    )


class HotelStub(BaseModel):
    address: Address
    checkIn: Optional[TimeRange] = None
    checkOut: Optional[TimeRange] = None
    emails: Optional[List[str]] = None
    hotelId: UUID = Field(
        ...,
        description='Unique identifier for this hotel within the Impala platform.',
        examples=['60a06628-2c71-44bf-9685-efbd2df4179e'],
    )
    href: Optional[str] = Field(
        None,
        description='URI that allows access to the full hotel information.',
        examples=['/v1/hotels/60a06628-2c71-44bf-9685-efbd2df4179e'],
    )
    images: List[Image] = Field(
        ...,
        description='Photos of the hotel, sorted in the recommended display order (e.g. for photo galleries) starting with the recommended hero image.',
    )
    location: Location
    name: str = Field(
        ..., description='Name of the hotel.', examples=['Impala Minimalist Palace']
    )
    phoneNumbers: Optional[List[str]] = Field(
        None, description="The hotel's phone number(s)"
    )
    starRating: float = Field(
        ..., description='The star rating (or star-equivalent rating)', examples=[2.5]
    )
    timezone: Optional[str] = Field(
        None, description='The timezone the hotel is in - e.g AST', examples=['AST']
    )


class RetailRate1(BaseModel):
    taxesAndFees: TaxesAndFees = Field(
        ...,
        description='Breakdown of taxes (e.g. VAT, city tax) and fees (e.g. cleaning or resort fees).',
    )
    total: Money


class Rate(BaseModel):
    cancellationPolicies: List[CancellationPolicy] = Field(..., min_length=1)
    components: List[RateComponent] = Field(..., min_length=0)
    end: date_aliased = Field(..., examples=['2021-11-23'])
    hotelAgreement: HotelAgreementStub
    maxOccupancy: int = Field(
        ..., description='Maximum number of adults included in the rate.', examples=[2]
    )
    rateId: constr(min_length=1) = Field(
        ...,
        examples=[
            '3rX3IaqkpJaPlttxoFoM3uDcHJEZCAuByqfBSLUPMvkBGyu7IAlhbxl3rZ7cVmVj6TbXL4EfiHlTA'
        ],
    )
    ratePlanId: Optional[int] = Field(
        None,
        description='The rate plan ID that is attached to this rate. Each rate plan ID can specify a unique combination of a cancellation policy and a meal plan.',
        examples=[1],
    )
    retailRate: RetailRate1 = Field(
        ...,
        description="The public retail rate you should quote and charge your guest. You're not allowed to quote or charge an amount lower than this if your website or app is publicly accessible.",
    )
    roomsSellable: Optional[float] = Field(
        None,
        description='Amount of rooms which can be sold for this occupancy level and room type at this rate price.',
    )
    sellerCommissionPercentage: float = Field(
        ...,
        description='The commission percentage you as a seller will earn from this booking, based on `retailRate.total`.',
        examples=[9.5],
    )
    sellerToImpalaPayment: Optional[Money] = Field(
        None,
        description="This is the amount payable to the hotel, which Impala will collect from you on the hotel's behalf. The Impala fee will be requested in addition to this, and also documented in a VAT invoice.",
    )
    start: date_aliased = Field(..., examples=['2021-11-20'])


class RatePlanRoomType(BaseModel):
    dates: List[RatesPerDate] = Field(
        ...,
        description='A list of future dates and their rate prices for this rate plan and room type.',
        min_length=1,
    )
    maxOccupancy: confloat(ge=1.0) = Field(
        ..., description='Number of adults that the room can accommodate.'
    )
    name: constr(min_length=1) = Field(
        ..., description='Formatted room type name.', examples=['Junior Suite']
    )
    roomTypeId: UUID = Field(..., description='Unique identifier of this room type.')


class RoomTypeModel(BaseModel):
    amenities: List[Amenity]
    description: str = Field(
        ...,
        description='Description',
        examples=['Modern room with plenty of natural light and modern furniture.'],
    )
    images: List[Image] = Field(..., description='Lists photos of this room type')
    maxOccupancy: int = Field(
        ...,
        description='Maximum number of adults that can occupy the room.',
        examples=[4],
    )
    name: str = Field(..., description='Name', examples=['Standard Room'])
    rates: Optional[List[Rate]] = Field(
        None,
        description='Bookable rates for this room type and the start and end dates of your availability search.',
    )
    roomTypeId: UUID = Field(
        ...,
        description='Unique identifier of the room type within the Impala platform.',
        examples=['d5b192ce-c45f-46da-abf5-3880b429b7cc'],
    )


class UpdateBookingContactRequest(BaseModel):
    bookingContact: PersonInfo
    updateBookingVersionAtTimestamp: UpdateBookingVersionAtTimestamp


class UpdateBookingRequest(BookingRequest):
    updateBookingVersionAtTimestamp: UpdateBookingVersionAtTimestamp


class UpdateBookingRequestWithRatePlans(BookingRequestWithRatePlans):
    updateBookingVersionAtTimestamp: UpdateBookingVersionAtTimestamp


class ValidationError(GenericError):
    validations: Optional[List[ValidationResult]] = None


class BookedRate(BaseModel):
    cancellationPolicies: List[CancellationPolicy] = Field(..., min_length=1)
    components: List[RateComponent] = Field(..., min_length=0)
    end: date_aliased = Field(..., examples=['2021-11-23'])
    hotelAgreement: HotelAgreementStub
    maxOccupancy: Optional[float] = None
    retailRate: RetailRate = Field(
        ...,
        description="The public retail rate you should quote and charge your guest. You're not allowed to quote or charge an amount lower than this if your website or app is publicly accessible.",
    )
    sellerCommissionPercentage: float = Field(
        ...,
        description='The commission percentage you as a seller will earn from this booking, based on `retailRate.total`.',
        examples=[9.5],
    )
    start: date_aliased = Field(..., examples=['2021-11-20'])


class BookedRoom(BaseModel):
    adults: Optional[confloat(ge=1.0)] = Field(
        None, description='Number of adult guests booked for this room type.'
    )
    notes: NotesBookedRoom
    rate: BookedRate
    roomType: RoomType = Field(..., description='Booked room')
    sellerToImpalaPayment: Optional[Money] = None


class Cancellation(BaseModel):
    fee: CancellationFee


class Booking(BaseModel):
    bookedRooms: List[BookedRoom] = Field(..., description='List of rooms booked')
    bookingId: str = Field(
        ...,
        description='Unique identifier for this booking within the Impala platform.',
        examples=['IM-0199-00000103'],
    )
    cancellation: Optional[Cancellation] = Field(
        None,
        description='Returned in case the booking (or parts of it) has been cancelled. Contains information on the cancellation.',
    )
    contact: Contact = Field(..., description='Guest details for this booking.')
    createdAt: datetime = Field(
        ...,
        description='Date and time (in UTC and ISO 8601 format) when the booking was created.',
        examples=['2020-10-20T12:38:22Z'],
    )
    end: date_aliased = Field(
        ..., description='The departure date of the booking.', examples=['2020-10-24']
    )
    hotel: HotelStub
    hotelConfirmationCode: Optional[str] = Field(
        None,
        description="The hotel's confirmation identifier for this booking.",
        examples=['04M3995'],
    )
    notes: Notes = Field(
        ...,
        description="The notes that were transmitted to the hotel as part of this booking.\n\nThese fields allow for **Markdown formatting** that's displayed to hotels in its rendered format in most circumstances but might fall back to text-only in scenarios where that's not possible.",
    )
    paymentBearerToken: Optional[str] = Field(
        None,
        description='If status is PAYMENT_REQUIRED, then this should be used as the Authorisation header for the POST to the /payments endpoint.',
    )
    paymentClientSecret: Optional[str] = Field(
        None,
        description='If status is PAYMENT_REQUIRED, then this should be used as the client secret when rendering Impala Payment Elements in the UI.',
    )
    start: date_aliased = Field(
        ..., description='The arrival date of the booking.', examples=['2020-10-21']
    )
    status: Status = Field(
        ...,
        description="Status of this booking within the Impala platform. When you make a booking, it'll first appear as `PENDING` until we receive the hotel's confirmation details. At this point your booking will move to `ACCEPTED`.",
        examples=['ACCEPTED'],
    )
    updatedAt: datetime = Field(
        ...,
        description='Date and time (in UTC and ISO 8601 format) when the booking was last updated.',
        examples=['2020-10-22T20:12:33Z'],
    )


class HotelFullDetail(BaseModel):
    address: Address
    amenities: List[Amenity]
    checkIn: TimeRange
    checkOut: TimeRange
    contractable: bool = Field(
        ...,
        description='This determines if you can negotiate directly with the hotel. ',
        examples=[True],
    )
    createdAt: Optional[datetime] = Field(
        None,
        description="Date and time (in UTC and ISO 8601 format) when the hotel's stable content (i.e. all the details of the hotel excluding its rates) was created.",
        examples=['2020-01-01T10:36:25.267Z'],
    )
    currency: str = Field(
        ...,
        description='The standard currency code used by the hotel.',
        examples=['USD'],
    )
    description: Optional[Description] = None
    emails: List[str]
    externalUrls: List[ExternalUrl]
    hotelId: UUID = Field(
        ...,
        description='Unique identifier for this hotel within the Impala platform.',
        examples=['60a06628-2c71-44bf-9685-efbd2df4179e'],
    )
    images: List[Image] = Field(
        ...,
        description='Photos of the hotel, sorted in the recommended display order (e.g. for photo galleries) starting with the recommended hero image.',
    )
    location: Location
    name: str = Field(
        ..., description='Name of the hotel.', examples=['Impala Minimalist Palace']
    )
    phoneNumbers: List[str] = Field(..., description="The hotel's phone number(s)")
    roomCount: float = Field(
        ..., description='The number of rooms at the hotel.', examples=[30]
    )
    roomTypes: List[RoomTypeModel] = Field(
        ..., description='List of room types available at this hotel.'
    )
    starRating: float = Field(
        ..., description='The star rating (or star-equivalent rating)', examples=[2.5]
    )
    termsAndConditions: str = Field(
        ...,
        description='Rules and terms that apply to this hotel and have to be shown to your guest before the make their booking.',
        examples=['Please note that passport details will be collected at check-in.'],
    )
    timezone: Optional[str] = Field(
        None, description='The timezone the hotel is in - e.g AST', examples=['ATC']
    )
    updatedAt: Optional[datetime] = Field(
        None,
        description="Date and time (in UTC and ISO 8601 format) when the hotel's stable content (i.e. all the details of the hotel excluding its rates)  was last updated.",
        examples=['2020-11-27T10:46:35.569Z'],
    )
    websiteUrl: str = Field(..., description="The URL to the hotel's website.")


class RatePlan(BaseModel):
    adjustments: Optional[List[RateAdjustment]] = Field(
        None, description='A list of adjustments that could apply to this rate.'
    )
    components: Optional[List[RateComponent]] = None
    conditions: Conditions
    description: constr(min_length=1) = Field(
        ...,
        description='Human-readable summary describing this rate plan.',
        examples=['NON_REFUNDABLE,DINNER'],
    )
    hotelId: UUID = Field(
        ...,
        description='The unique identifier of the hotel this rate plan is available for.',
    )
    ratePlanId: float = Field(
        ..., description='The integer identifier of this rate plan.'
    )
    restrictions: RatePlanRestrictions
    roomTypes: List[RatePlanRoomType] = Field(
        ...,
        description='A list of room types this rate plan is bookable for.',
        min_length=1,
    )


class BookingsGetResponse(BaseModel):
    data: List[Booking]
    pagination: Pagination


class HotelsGetResponse(BaseModel):
    data: Optional[List[HotelFullDetail]] = None
    pagination: Optional[Pagination] = None


class HotelsHotelIdRatePlansGetResponse(BaseModel):
    data: List[RatePlan]
    pagination: Pagination
