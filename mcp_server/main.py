# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:40:17+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union
from uuid import UUID

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity, HTTPBearer
from fastapi import Path, Query
from pydantic import confloat, conint

from models import (
    Booking,
    BookingRequest,
    BookingsGetResponse,
    Country,
    Created,
    End,
    GenericError,
    HotelFullDetail,
    HotelIds,
    HotelsGetResponse,
    HotelsHotelIdRatePlansGetResponse,
    Name1,
    RatePlan,
    StarRating,
    Start,
    UpdateBookingContactRequest,
    UpdateBookingRequest,
    Updated,
    UpdatedAt,
    ValidationError,
)

app = MCPProxy(
    contact={
        'email': 'support@impala.travel',
        'name': 'Impala Developer Support',
        'url': 'https://docs.impala.travel/',
    },
    description="Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.\n\nGetting started is easy:\n\n> **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).\n\n> **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)\n\n> **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.\n\nWant to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.",
    termsOfService='https://impala.travel/terms-and-conditions/',
    title='Impala Hotel Booking API',
    version='1.003',
    servers=[
        {
            'description': 'Hotel Booking API Sandbox',
            'url': 'https://sandbox.impala.travel/v1',
        },
        {
            'description': 'Hotel Booking API Production',
            'url': 'https://api.impala.travel/v1',
        },
    ],
)


@app.get(
    '/bookings',
    description=""" Returns a list of all the bookings you've made.

You can filter the list based on when bookings were created or last updated, as well as their arrival (`start`) and departure (`end`). These date-based filters allow to narrow down the result with modifiers for less than (`lt`), greater than (`gt`), lower than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`).

Example: Adding the query parameters `start[gt]=2021-05-20&updated[lte]=2020-11-20T11:11:00.000Z` would return bookings arriving after May 20th, 2020 that were updated before or on November 20th, 2020 at 11:11 am UTC.

You can specify the **sorting order** in which bookings are returned:
* This is done by using the `sortBy` query parameter.
* Results can be sorted by `createdAt` and `updatedAt`
* The parameter allows for a comma-separated list of arguments with `:asc` (ascending, the default if no sorting is specified) and `:desc` (descending) modifiers. """,
    tags=['booking_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def list_bookings(
    start: Optional[Start] = None,
    end: Optional[End] = None,
    created: Optional[Created] = None,
    updated: Optional[Updated] = None,
    size: Optional[float] = 100,
    offset: Optional[float] = 0,
    sort_by: Optional[str] = Query('createdAt:asc', alias='sortBy'),
):
    """
    List all bookings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/bookings',
    description=""" Creates a booking for for the rate and dates you specify in the request body.

You'll need a `roomTypes[].rates[].rateId` that's bookable for those dates, which you can find using the [Retrieve a hotel](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1hotels~1%7BhotelId%7D/get) endpoint.

If you have provided a credit card on the dashboard then **Impala will send the booking to the hotel immediately**. We'll ensure payment is taken care of before your guest arrives at the hotel.

* Your guest needs to be **paying you** the rate specified in `retailRate` (as listed in the [Retrieve a hotel](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1hotels~1%7BhotelId%7D/get) response) before you submit this request.
* Once your request is received and the booking is confirmed, **Impala will charge you** as the seller this `retailRate` minus the `sellerCommissionPercentage` (which is the affiliate commission you get to keep). We'll use the business credit card you've added to your account as payment method for this.
* The difference between the amount you charge your guest (`retailRate`, e.g. 200 €) and what Impala charges you (`retailRate` minus `sellerCommissionPercentage`, e.g. 200 €) is your commission (in this example: 20 €) to keep.

You can find more information on how money flows between your guest and you, and you and Impala, [in this article](https://impala.stoplight.io/docs/booking-api/branches/v1.003/docs/good-to-know/payments-and-commissions.md)

<!-- theme: warning -->

> **This request might take up to 20 seconds to load.** While we work to return a response to your request within milliseconds in most cases, some bookings require us to re-verify current pricing in real-time and doing so might take up to 20 seconds. Please make sure your app handles this waiting state appropriately. """,
    tags=['booking_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def create_booking(body: BookingRequest = None):
    """
    Create a booking
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/bookings/{bookingId}',
    description=""" <!-- theme: danger -->

> Cancels the specified booking with immediate effect. This action might result in a cancellation charge being charged.

Submitting this request means we'll notify the hotel of the cancellation and that they won't expect your guest.

You can use `GET /bookings/{bookingId}`to see the cancellation policies that apply to a booking at a given point in time. Please note that cancelling a booking will incur a cancellation fee according to the rules that apply at the time of cancellation. You can find the cancellation fee that has been charged in the response of this call in the `cancellation.fee` object.

If the booking you cancelled allows for a partial or full refund, we'll credit your Impala balance with the amount we charged you as the seller of this booking – meaning we'll deduct the amount the next time we're requesting payment for the sum of all the bookings you made. """,
    tags=['booking_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def cancel_booking(booking_id: str = Path(..., alias='bookingId')):
    """
    Cancel a booking
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/bookings/{bookingId}',
    description=""" Returns all details for the specified booking. """,
    tags=['booking_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def retrieve_booking(booking_id: str = Path(..., alias='bookingId')):
    """
    Retrieve a booking
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/bookings/{bookingId}',
    description=""" <!-- theme: danger -->

> Updates the specified booking with immediate effect. This action might result in a cancellation charge being charged.

> Please note that if you wish to change the contact details associated with a booking, you should use the [Change a Booking's Contact Details](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings~1%7BbookingId%7D~1booking-contact/put) endpoint.

Changes / updates a confirmed booking with the details you provide in the request body.

When your guest needs to change their booking, you can use this endpoint to change any of the details you initially supplied when you [made their booking](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings/post), e.g. you'll need to query for availability and use the `roomTypes[].rates[].rateId` that are available currently for their new stay dates. Any new rates selected must be for the same hotel as the original booking.

A booking cannot be updated on or after the check in day of the original or new stay.

In addition, we require you do supply a `updateBookingVersionAtTimestamp` field with the `updatedAt` timestamp of the booking. You can find this value by looking up the booking via the [Retrieve a booking](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings~1%7BbookingId%7D/get) endpoint. This is to avoid race conditions where another update might have happened since the last time you have checked for the current details of this booking.

The `status` of this booking will switch back to `PENDING` until we have submitted and confirmed the new details with the hotel.

<!-- theme: warning -->

> **This request might take up to 20 seconds to load.** While we work to return a response to your request within milliseconds in most cases, some bookings require us to re-verify current pricing in real-time and doing so might take up to 20 seconds. Please make sure your app handles this waiting state appropriately. """,
    tags=['booking_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def update_booking(
    booking_id: str = Path(..., alias='bookingId'), body: UpdateBookingRequest = None
):
    """
    Change a booking
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/bookings/{bookingId}/booking-contact',
    description=""" Updates a confirmed booking with the booking contact details you provide in the request body.

In addition, we require you to supply a `updateBookingVersionAtTimestamp` field with the `updatedAt` timestamp of the booking. You can find this value by looking up the booking via the [Retrieve a booking](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings~1%7BbookingId%7D/get) endpoint. This is to avoid race conditions where another update might have happened since the last time you have checked for the current details of this booking. """,
    tags=['booking_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def update_booking_contact(
    booking_id: str = Path(..., alias='bookingId'),
    body: UpdateBookingContactRequest = None,
):
    """
    Change a booking contact
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hotels',
    description=""" Returns a list of all hotels worldwide that can be booked through Impala.

You can **filter** the results:

* Adding `longitude`, `latitude` and a `radius` (in meters) query parameters will filter the results to hotels around this location.
* Adding `start` and `end` dates (in ISO 8601 notation, e.g. `2021-12-31`) for the expected arrival and departure dates of your guests will limit the results to hotels that have at least one room bookable for this timeframe.
* Adding `starRating`, `name` or `country` allows you to filter to hotels based on these values (e.g. `?starRating[gte]=4&name[like]=palace` for hotels with a rating of 4 or up with a name containing "palace")
* Adding `hotelIds` allows you to limit the results to include only hotels with the ids listed. Its value should be a comma-separated list of hotel ids (e.g. `?hotelIds[]=hotelIdA,hotelIdB`)

* Adding `contractable` allows you to filter to hotels that you can directly negotiate with through our [deals feature](https://docs.impala.travel/docs/booking-api/ZG9jOjcyNjgzMTA-contracting-with-hotels). (e.g `?contractable=true` or `?contractable=false`)

You can specify the **sorting order** in which hotels are returned:
* This is done by using the `sortBy` query parameter.
* Results can be sorted by `name` alphabetically, star `rating` and `distance_m` (in meters from the specified latitude/longitude location).
* The parameter allows for a comma-separated list of arguments with optional `:asc` (ascending, the default if the modifier is omitted) and `:desc` (descending) modifiers.

If no hotels match your filter criteria, an empty array will be returned. """,
    tags=['hotel_catalog'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def list_hotels(
    name: Optional[Name1] = None,
    star_rating: Optional[StarRating] = Query(None, alias='starRating'),
    country: Optional[Country] = None,
    start: Optional[str] = None,
    end: Optional[str] = None,
    latitude: Optional[confloat(ge=-90.0, le=90.0)] = None,
    longitude: Optional[confloat(ge=-180.0, le=180.0)] = None,
    radius: Optional[conint(ge=0)] = None,
    hotel_ids: Optional[HotelIds] = Query(None, alias='hotelIds'),
    created: Optional[Created] = None,
    updated: Optional[Updated] = None,
    size: Optional[confloat(ge=1.0, le=300.0)] = 25,
    offset: Optional[float] = 0,
    sort_by: Optional[str] = Query('createdAt:desc', alias='sortBy'),
):
    """
    List all hotels
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hotels/{hotelId}',
    description=""" Returns the full content, room types and rates for the specified hotel.

When querying the hotels API you can query with or without dates. Where querying with dates requires providing valid values for the `start` and `end` parameters. Requests without these values will be considered a query without dates.

**Querying without dates:**

When you query without dates, the search result will include all properties that match your request. Including all content that is associated with those properties. However you will find that the `rates` attribute for each room will always be empty.

**Querying with dates:**

When you query with dates, the search result will include all properties that match your request, including all content that is associated with those properties. Rooms which do not have available prices for the provided dates will appear with an empty `rates` array.

For rooms where there are available prices the `rates` array will include both the public rates of the hotel, along with prices that come from deals in which you are participating. This would include private deals which you have negotiated with a hotel, along with Impala deals which you have been verified for.

Using the `rateId` of any of those rates, you can use the [Create a booking](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings/post) endpoint to make a booking. """,
    tags=['hotel_catalog'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def retrieve_hotel(
    hotel_id: UUID = Path(..., alias='hotelId'),
    start: Optional[str] = None,
    end: Optional[str] = None,
):
    """
    Retrieve a hotel
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hotels/{hotelId}/rate-plans',
    description=""" Returns a list of all rate plans available for you for a hotel.

Rate plans are products the hotel is offering. They typically consist of a combination of restrictiveness in case of cancellations or changes, the time they're bookable, minimum or maximum length of stay restrictions (e.g. week-long bookings), included components like breakfast or dinner and/or the conditions under which the room can be sold (e.g. private rates that can only be offered and sold to a closed user group behind login).

Examples of rate plans:

* Non-refundable room rate that includes breakfast
* Room-only rate with free cancellation up to 14 days before arrival

For each such rate plan this endpoint returns the room types it's available for, alongside prices for each date and occupancy that can be sold – or the information that the room isn't available (closed) for a certain date.

For the vast majority of our customers, availability searches using the [List all hotels](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1hotels/get) endpoint are the best choice. It accepts the dates your guest is looking for and provides the rates to display.

This endpoint can help augment this for two additional use cases:

This endpoint allows you to query rate prices for all future dates in one go, making it a great choice to feed availability information and prices into your own system or displaying a rate calender to guide your guests to gain an overview of future availability and prices. """,
    tags=['rate_plan_operations', 'hotel_catalog'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def list_rate_plans_for_hotel(
    hotel_id: UUID = Path(..., alias='hotelId'),
    updated_at: Optional[UpdatedAt] = Query(None, alias='updatedAt'),
    size: Optional[confloat(ge=1.0, le=300.0)] = 25,
    offset: Optional[float] = 0,
    start: Optional[str] = None,
    end: Optional[str] = None,
    room_id: Optional[UUID] = Query(None, alias='roomId'),
):
    """
    List all rate plans (rate calendar) for a hotel (Beta endpoint)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hotels/{hotelId}/rate-plans/{ratePlanId}',
    description=""" Returns a single rate plan available for you for a hotel.

Rate plans are products the hotel is offering. They typically consist of a combination of restrictiveness in case of cancellations or changes, the time they're bookable, minimum or maximum length of stay restrictions (e.g. week-long bookings), included components like breakfast or dinner and/or the conditions under which the room can be sold (e.g. private rates that can only be offered and sold to a closed user group behind login).

Examples of rate plans:

* Non-refundable room rate that includes breakfast
* Room-only rate with free cancellation up to 14 days before arrival

This endpoint returns a singular available rate plan. """,
    tags=['rate_plan_operations', 'hotel_catalog'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def list_rate_plan_for_hotel_for_rate_plan_id(
    hotel_id: UUID = Path(..., alias='hotelId'),
    rate_plan_id: int = Path(..., alias='ratePlanId'),
    updated_at: Optional[UpdatedAt] = Query(None, alias='updatedAt'),
    size: Optional[confloat(ge=1.0, le=300.0)] = 25,
    offset: Optional[float] = 0,
    start: Optional[str] = None,
    end: Optional[str] = None,
    room_type_id: Optional[UUID] = Query(None, alias='roomTypeId'),
):
    """
    List a rate plan (rate calendar) for a hotel (Beta endpoint).
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
